#cloud-config

apt:
  preserve_sources_list: true
  sources:
    msft.list:
      source: 'deb https://packages.microsoft.com/ubuntu/18.04/multiarch/prod bionic main'
      key: |
        -----BEGIN PGP PUBLIC KEY BLOCK-----
        -----END PGP PUBLIC KEY BLOCK-----
packages:
  - moby-cli
  - libiothsm-std
  - moby-engine
runcmd:
  - |
    set -x
    (
      # Wait for docker daemon to start
      while [ $(ps -ef | grep -v grep | grep docker | wc -l) -le 0 ]; do 
        sleep 3
      done

      # Prevent iotedge from starting before the device connection string is set in config.yaml
      sudo ln -s /dev/null /etc/systemd/system/iotedge.service
      apt install iotedge
      sed -i "s#\(device_connection_string: \).*#\1\"<REPLACE_WITH_CONNECTION_STRING>\"#g" /etc/iotedge/config.yaml 

      # Check if a NVIDIA GPU is installed.
      lspci -vnnn | grep NVIDIA
      HAS_GPU=$?
      if [ $HAS_GPU -eq 0 ]; then
        # Add CUDA driver repo's
        CUDA_REPO_PKG=cuda-repo-ubuntu1804_10.2.89-1_amd64.deb
        wget -O /tmp/$${CUDA_REPO_PKG} https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/$${CUDA_REPO_PKG}
        sudo dpkg -i /tmp/$${CUDA_REPO_PKG}
        sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
        rm -f /tmp/$${CUDA_REPO_PKG}

        # Install CUDA drivers
        sudo apt update
        sudo apt install -y --no-install-recommends cuda-drivers

        # Add the nvidia-docker repos
        distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
        && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \
        && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list

        # Install nvidia-container-toolkit
        sudo apt update
        sudo apt install -y nvidia-container-toolkit
        sudo systemctl restart docker
      fi

      # create the local group and user for the edge module
      # these are mapped from host to container in the deployment manifest in the desire properties for the module
      sudo groupadd -g 1010 localedgegroup
      sudo useradd --home-dir /home/localedgeuser --uid 1010 --gid 1010 localedgeuser
      sudo mkdir -p /home/localedgeuser

      # create folders to be used by the rtspsim module
      sudo mkdir -p /home/localedgeuser/samples
      sudo mkdir -p /home/localedgeuser/samples/input

      sudo curl https://lvamedia.blob.core.windows.net/public/camera-300s.mkv --output /home/localedgeuser/samples/input/camera-300s.mkv
      sudo curl https://lvamedia.blob.core.windows.net/public/lots_284.mkv --output /home/localedgeuser/samples/input/lots_284.mkv
      sudo curl https://lvamedia.blob.core.windows.net/public/lots_015.mkv --output /home/localedgeuser/samples/input/lots_015.mkv
      sudo curl https://lvamedia.blob.core.windows.net/public/t2.mkv --output /home/localedgeuser/samples/input/t2.mkv

      # give the local user access
      sudo chown -R localedgeuser:localedgegroup /home/localedgeuser/

      # set up folders for use by the Video Analyzer module
      # these are mounted in the deployment manifest

      # !NOTE! these folder locations are must match the folders used in `deploy-modules.sh` and ultimately the IoT edge deployment manifest

      # general app data for the module
      sudo mkdir -p /var/lib/videoanalyzer 
      sudo chown -R localedgeuser:localedgegroup /var/lib/videoanalyzer/
      sudo mkdir -p /var/lib/videoanalyzer/tmp/ 
      sudo chown -R localedgeuser:localedgegroup /var/lib/videoanalyzer/tmp/
      sudo mkdir -p /var/lib/videoanalyzer/logs
      sudo chown -R localedgeuser:localedgegroup /var/lib/videoanalyzer/logs

      # output folder for file sink
      sudo mkdir -p /var/media
      sudo chown -R localedgeuser:localedgegroup /var/media/

      # Finally start iotedge
      systemctl unmask iotedge
      systemctl start iotedge
      echo 'ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr' >> /etc/ssh/sshd_config
    ) &
